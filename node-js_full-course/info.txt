

Варианты модулей в Node.js

// COMMON JS MODULE
1.1 CommonJS Modules - require...
1.2 CommonJS Modules - module.export || export

// ES6 MODULE
2.1 ECMAScript Modules (ESM) - export...
2.2 ECMAScript Modules (ESM) - import...

Внутри модуля ES6 нет доступа к переменным MODULE & REQUIRE, а также не доступа к переменным (exports, __filename, __dirname), потому что модули ES6 не оборачиваются ни в какую функцию при выполнении этих модулей.


ВБУДОВАНІ МОДУЛІ
1. fs - для работи із файловою системою, запису, читання файлів, переміщення, видалення, перейменування.
2. events - для роботи із подіями, створення подій, виклику певних колбек функцій, при виникнення подій.
  2.1 Архітектура node.js грунтується на подіях
  2.2 Вбудовані модулі, такі як модуль fs, генерують події
  2.3 Наприклад подія створюється, коли дані були прочитані із файла, або коли був отриманий новий запит http-сервером
  2.4 В відповідь на подію викликається колбек функція, зареєстрована для конкретної події
  2.5 Для однієї події може бути декілька зареєстрованних колбек функцій
  2.6 Модуль Events надає клас EVENTEMITTER для работі із подіями в node.js
  2.7 Всі обʼєкти, які створюють події, є екземплярами класу EVENTEMITTER
  2.8 Екземпляри класу EVENTEMITTER наслідують метод on, за допомогою якого можна створювати слухачів подій
  2.9 Події створюються за допомогою метода emit
3. path - для роботи із шляхами до файлів та директорій.
4. http - за допомогою якого можна запустити http server за допомогою node.js та приймати запити по протоколу http від клієнтів, опрацьовувати їх та відправляти відповіді.
5. stream - дозволяє створювати потоки, перенаправляти їх та обробляти.
  5.1 Поток представляє собою дані, які доступні не всі відрару, а частинами.
  5.2 Це робить потоки ідеальними для роботи із великими обʼємами данних, які можуть не вміщатись в памʼяті одночасно
  5.3 Приклад: можна прочитати файл частинами, що дозволить уникнути читання файла та запису його в памʼять.
  5.4 Всі потоки є екземплярами класа EventEmitter.
  5.5 Є 4 типи потоків
    5.5.1 Readable - для читання данних
    5.5.2 Writable - для запису данних
    5.5.3 Duplex - як для читання, так і для запису данних
    5.5.4 Transform - дуплексний потік, який перетворює вхідні дані
5. NPM
  5.0 npm packages
    5.0.0. NPM - это утилита командной строки для установки и управления NPM пакетами.
    5.0.1. NPM - инсталируется автоматически с node.js.
  5.1 Version npm packages
    5.1.1. Семантичні номера версій 4.18.1
      5.1.1.1 Основна версія (major) - 4 - внесення критичних змін або оновлень
      5.1.1.2 Мінорна версія (minor) - 18 - добавлення нового функціоналу із збереженням попереднього
      5.1.1.3 Патч версія (patch) - 1 - внесення незначних змін із збереженням попереднього функціоналу
    5.1.2 Указання прийнятних оновлень пакетів
      5.1.2.1 ^4.18.1 - Допускаються мінорні і патч оновлення пакета, наприклад 4.19.0
      5.1.2.2 ~4.18.1 - Допускаються лише патч оновлення пакета, наприклад 4.18.2
      5.1.2.3 4.18.1 - В проекті необхідна лише конкретно указана версія
  5.2 Оновлення пакетів
    5.2.1 npm update <package-name>
    5.2.2 npm update express
  5.3 Видалення пакетів
    5.3.1 npm uninstall <package-name>
    5.3.2 npm uninstall react
  5.4 Глобальна установка пакетів
    5.4.1 npm install -g <package-name>
    5.4.2 npm install -g nodemon
    5.4.3 npm list -g - дозволяє побачити список всіх глобально установлених пакетів на компʼютері
  5.5 package-lock.json
    5.5.1 файл містить точні версії пакетів, які необхідно установити
    5.5.2 Містить залежності залежностей пакета
  5.6 dependencies
    5.6.1 зависимости необходимые для работы приложения
    5.6.2 npm install --only=prod - устанавливаются только те пакеты, которые нужны для работы на проде
    5.6.3 npm install --omit=dev - устанавливаются только те пакеты, которые нужны для работы на проде
    5.6.4 npm install command может изменять PACKAGE-LOCK.JSON файл
    5.6.5 начиная с версии npm 5.1.0 файл package.json имеет более высокий приоритет перед файлом package-lock.json
      и если согласно файло package.json на npm доступные более новые версии, которые являются совместимыми версиями с теми, которые указаны в файле package-lock.json,
      то npm при введении команды npm install может обновить версии.
      Если задача установить именно те версии, которые указаны в файле package-lock.json не обновляя их, то следует использовать команду npm ci
    5.6.6 npm clean install || npm ci - устанавливает именно те версии зависимостей, которые содержить файл package-lock.json и файле package.json.
      Folder node_modules всегда создается заного.
      npm ci не используется для установки отдельных пакетов.
    5.6.7 npm ci - рекомендуется использовать для запуска приложения в продакшене, чтоб установились именно те версии, которые указаны в файлах package.json & package-lock.json
  5.7 devDependencies
    5.7.1 зависимости необходимые для процесса разработки приложения
    5.7.2 npm install --save-dev <package-name> || npm install -D <package-name>
  5.8 scripts
    5.8.1 npm test
    5.8.2 npm start
    5.8.3 npm run dev
    5.8.4 Если у скриптов названия не test & и не start, то в терминале необходимо писать npm run и название самого script





    console command
    ls -la - show files and their size
